/**
 * 指令集
 */
angular.module('chat.directive', [])
    .directive('videoView', function ($rootScope, $timeout) {
        return {
            restrict: 'E',
            template: '<div class="video-container"></div>',
            replace: true,
            link: function (scope, element, attrs) {
                function updatePosition() {
                    try {
                        cordova.plugins.phonertc.setVideoView({
                            container: element[0],
                            local: {
                                position: [10, 10],
                                size: [100, 100]
                            }
                        });
                    } catch (err) {
                        alert('direc' + err);
                    }
                }
                $timeout(updatePosition, 500);
                $rootScope.$on('videoView.updatePosition', updatePosition);
            }
        }
    })
    // 弹框背景
    .directive('rjCloseBackDrop', [function () {
        return {
            scope: false,
            restrict: 'A',
            replace: false,
            link: function (scope, iElm, iAttrs, controller) {
                var htmlEl = angular.element(document.querySelector('html'));
                htmlEl.on("click", function (event) {
                    if (event.target.nodeName === "HTML" &&
                        scope.popup.optionsPopup && scope.popup.isPopup) {
                        scope.popup.optionsPopup.close();
                        scope.popup.isPopup = false;
                    }
                });
            }
        };
    }])
    // 长按弹出框
    .directive('rjHoldActive', ['$ionicGesture', '$timeout', '$ionicBackdrop',
        function ($ionicGesture, $timeout, $ionicBackdrop) {
            return {
                scope: false,
                restrict: 'A',
                replace: false,
                link: function (scope, iElm, iAttrs, controller) {
                    $ionicGesture.on("hold", function () {
                        iElm.addClass('active');
                        $timeout(function () {
                            iElm.removeClass('active');
                        }, 300);
                    }, iElm);
                }
            };
        }
    ])
    // 进入时隐藏tab，退出时显示(用于聊天)
    .directive('hideTabsxietong', function ($rootScope) {
        return {
            restrict: 'A',
            link: function ($scope, $el) {
                $scope.$on("$ionicView.beforeEnter", function () {
                    $rootScope.hideTabsxietong = true;
                });
                $scope.$on("$ionicView.beforeLeave", function () {
                    $rootScope.hideTabsxietong = false;
                });
            }
        };
    });

angular.module('chat.directive')
    .directive('chatInput', function (PhotoAndImages, $timeout) {
        return {
            restrict: "E",
            templateUrl: 'module/chat/directives/chatinput/chatinput.tpl',
            replace: true,
            scope: {
                sendmessage: "=textMessage",
                onShowFace: "=onShowFace",
                onShowPhonebar: "=onShowPhonebar",
                onSendTextMessage: "&onSendTextMessage",
                onVoiceHold: "&onVoiceHold",
                onVoiceRelease: "&onVoiceRelease",
            },
            link: function (scope, element, attrs, controller) {
                scope.isVoiceMethod = true;
                scope.isStartRecord = 0,

                scope.switchInputMethod = function (evtobj) {
                    if (scope.isVoiceMethod = !scope.isVoiceMethod, scope.isVoiceMethod) {
                        var i = 1;
                    } else {
                        var input = evtobj.currentTarget.parentNode.querySelector("textarea");
                        scope.isStartRecord = !1;
                        $timeout(function () {
                            // input.focus()
                        }, 500);
                    }
                }

                scope.onSendMessage = function () {
                    scope.onSendTextMessage()();
                    //scope.sendmessage = '';
                    $timeout(function () {
                        document.querySelector("#text_content").focus();
                    }, 0);
                }
                scope.onVoiceHold = function () { }
                scope.onVoiceRelease = function () { }

            }
        };
    });

angular.module('chat.directive')
    .directive('chatMessagePanel', function ($ionicModal, $timeout) {
        return {
            restrict: "E",
            templateUrl: 'module/chat/directives/chatmessagepanel/chatmessagepanel.tpl',
            replace: true,
            scope: {
                messageList: "=messageList",
            },
            link: function (scope, element, attrs, controller) {
                var mediaRec;
                scope.play = function (voiFile, type) {
                    if (mediaRec) {
                        mediaRec.stop();
                        mediaRec.release();
                    }
                    var target = angular.element(event.target).find("i");
                    if (type == "you") {
                        target.addClass("web_wechat_voice_gray_playing");
                    } else {
                        target.addClass("web_wechat_voice_playing");
                    }
                    if (isIOS) {
                        voiFile = voiFile.replace('file://', '');
                    }
                    mediaRec = new Media(voiFile,
                        // 成功操作
                        function () {
                            if (type == "you") {
                                target.removeClass("web_wechat_voice_gray_playing");
                            } else {
                                target.removeClass("web_wechat_voice_playing");
                            }
                            console.log("play():Audio Success");
                        },
                        // 失败操作
                        function (err) {
                            if (type == "you") {
                                target.removeClass("web_wechat_voice_gray_playing");
                            } else {
                                target.removeClass("web_wechat_voice_playing");
                            }
                            console.log("play():Audio Error: " + err.code);
                        }
                    );
                    //开始播放录音
                    mediaRec.play();
                    return false;
                };

                $ionicModal.fromTemplateUrl('module/chat/directives/chatmessagepanel/message/BigImage.html', {
                    scope: scope,
                    animation: 'slide-in-up'
                }).then(function (modal) {
                    scope.modal = modal;
                });
                scope.openImage = function (data) {
                    scope.imageData = data;
                    scope.modal.show();
                };
                scope.closeModal = function () {
                    scope.modal.hide();
                };
                scope.openImage = function (data) {
                    scope.imageData = data;
                    scope.modal.show();
                };
                // 构建消息UI模板
                scope.buildUrl = function (type) {
                    var tmpName;
                    switch (type) {
                        case 'RC:TxtMsg':
                            tmpName = 'txt';
                            break;
                        case 'RC:ImgMsg':
                            tmpName = 'img';
                            break;
                        case 'RC:DizNtf':
                            tmpName = 'diz';
                            break;
                        case 'RC:LBSMsg':
                            tmpName = 'lbs';
                            break;
                        case 'RC:ImgTextMsg':
                            tmpName = 'imgtext';
                            break;
                        case 'RC:VcMsg':
                            tmpName = 'vc';
                            break;
                        default:

                    }
                    return 'module/chat/directives/chatmessagepanel/message/' + tmpName + '.html';
                }
            }
        };
    });

angular.module('chat.directive')
    .directive('chatToolBar', function(PhotoAndImages) {
        return {
            restrict: "E",
            templateUrl: 'module/chat/directives/chattoolbar/chattoolbar.tpl',
            replace: true,
            scope: {
                sendPhoto: "&sendPhoto",
                conversationType:"=conversationType"
            },
            link: function(scope, element, attrs, controller) {
                scope.takePic = function(way) {
                    var options;
                    // 从相册中选择
                    if (way) {
                        options = {
                            quality: 80,
                            targetWidth: 320,
                            targetHeight: 320,
                            saveToPhotoAlbum: false,
                            sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                            destinationType: Camera.DestinationType.FILE_URI
                        };
                        PhotoAndImages.getImages(options).then(function(data) {
                            scope.sendPhoto()(data);
                        });
                    } else {
                        // 拍照获取
                        options = {
                            quality: 80,
                            targetWidth: 320,
                            targetHeight: 320,
                            saveToPhotoAlbum: false,
                            sourceType: Camera.PictureSourceType.Camera,
                            destinationType: Camera.DestinationType.FILE_URI
                        };
                        PhotoAndImages.getPhoto(options).then(function(data) {
                            scope.sendPhoto()(data);
                        });
                    }
                }
            }
        };
    });

angular.module('chat.directive')
    .directive('messageList', function ($ionicPopup) {
        return {
            restrict: "E",
            templateUrl: 'module/chat/directives/messagelist/messagelist.tpl',
            replace: true,
            scope: {
                friendsMessage: "=friendsMessage",
                gotoChatDetils: "&gotoChatDetils2",
                markMessage: "&markMessage2",
                deleteMessage: "&deleteMessage2",
            },
            link: function (scope, element, attrs, controller) {
                scope.popup = {
                    isPopup: false,
                    index: 0
                };
                // 弹出框
                scope.popupMessageOpthins = function (message) {
                    scope.popup.index = scope.friendsMessage.indexOf(message);
                    scope.popup.optionsPopup = $ionicPopup.show({
                        templateUrl: "module/chat/directives/messagelist/popup.html",
                        scope: scope,
                    });
                    scope.popup.isPopup = true;
                };
                // 设为已读
                scope.markMessage_local = function () {
                    var index = scope.popup.index;
                    scope.popup.optionsPopup.close();
                    scope.popup.isPopup = false;
                    scope.markMessage()(index);
                };
                // 删除消息
                scope.deleteMessage_local = function () {
                    var index = scope.popup.index;
                    scope.popup.optionsPopup.close();
                    scope.popup.isPopup = false;
                    scope.deleteMessage()(index);
                };

                scope.gotoChatDetils_local = function (friend, $index) {
                    scope.gotoChatDetils()(friend, $index);
                }
            }
        };
    });

/**
 * 指令集
 */
angular.module('chat.directive')
    .directive("ngTouchend", function() {
        return {
            controller: function($scope, $element, $attrs) {
                $element.bind('touchend', onTouchEnd);

                function onTouchEnd(event) {
                    var method = $element.attr('ng-touchend');
                    $scope.$event = event;
                    $scope.$apply(method);
                };
            }
        };
    }).directive("ngTouchmove", function() {
        return {
            controller: function($scope, $element, $attrs) {
                $element.bind('touchstart', onTouchStart);

                function onTouchStart(event) {
                    event.preventDefault();
                    $element.bind('touchmove', onTouchMove);
                    $element.bind('touchend', onTouchEnd);
                };

                function onTouchMove(event) {
                    var method = $element.attr('ng-touchmove');
                    $scope.$event = event;
                    $scope.$apply(method);
                };

                function onTouchEnd(event) {
                    event.preventDefault();
                    $element.unbind('touchmove', onTouchMove);
                    $element.unbind('touchend', onTouchEnd);
                };
            }
        };
    }).directive('contactNav', [function() {
        return {
            restrict: "E",
            template: '<div class="nav-container">'
            + '    <ul class="alpha-nav" '
            + '        ng-touchmove="goList($event)" '
            + '        ng-touchend="hidePromptBox()" '
            + '        ng-touchstart="goListByTap($event)">'
            + '        <li ng-repeat="charobj in navCharList_local" '
            + '              data-id="{{charobj.id}}">{{charobj.firstChar}} '
            + '        </li> '
            + '        <div class="prompt-box" ng-show="tipObj.isShow">{{tipObj.content}}</div> '
            + '    </ul> '
            + '</div>',
            replace: true,
            scope: {
                navCharList_local: "=navCharList",
                charClickCb: "&charClickCb"
            },
            link: function(scope, element, attrs, controller) {
                // 滚动的指定元素
                var _delegateHandle = attrs["delegateHandleName"];
                scope.tipObj = {
                    "isShow": false,
                    "content":''
                };

                /*
                 * 隐藏提示框
                 * @param {object} event [release事件对象]
                 * */
                scope.hidePromptBox = function(event) {
                    scope.tipObj = { "isShow": false };
                };

                /*
                 * 用户单击
                 * @param {object} event [release事件对象]
                 * */
                scope.goListByTap = function(event) {
                    var nodeName = event.target.nodeName.toUpperCase();
                    if (nodeName !== "LI") {
                        return;
                    }
                    // 事件源
                    var target = angular.element(event.target);
                    // 首字母
                    var firstCode = target.html();
                    // 导航事件回调
                    var aaaa = scope.charClickCb()(firstCode);

                    //标签id
                    var id = target.attr("data-id");
                    scope.tipObj = { "isShow": true, "content": firstCode };

                    scrollCharToTop(id, _delegateHandle);
                };

                /*
                 * 用户滑动
                 * @param {object} event [release事件对象]
                 * */
                scope.goList = function(event) {
                    var nodeName = event.target.nodeName.toUpperCase();
                    if (nodeName !== "LI") {
                        return;
                    }
                    // 根据坐标来获取元素！
                    var ttt = document.elementFromPoint(
                        event.changedTouches[0].pageX,
                        event.changedTouches[0].pageY
                    );
                    nodeName = ttt ? ttt.nodeName.toUpperCase() : "";
                    if (nodeName !== "LI") {
                        return;
                    }
                    var target = angular.element(ttt);
                    var firstCode = target.html().trim();
                    // 导航事件回调
                    scope.charClickCb()(firstCode);
                    // 导航id
                    var id = target.attr("data-id");
                    // 提示框
                    scope.tipObj = { "isShow": true, "content": firstCode };
                    scrollCharToTop(id, _delegateHandle);
                };

                /*
                 * 通讯录滚动逻辑
                 * @param {object} id [首字母元素ID]
                 * @param {object} _delegateHandle [容器对象]
                 * */
                function scrollCharToTop(id, _delegateHandle) {
                    var charPos = angular.element(document.querySelectorAll("#_" + id));
                    var contactContainer = angular.element(document.querySelectorAll("#" + _delegateHandle));
                    if (charPos.length === 1) {
                        scrollTop = charPos[0].offsetTop;
                        // 27为元素高度
                        contactContainer[0].scrollTop = scrollTop - 27;
                    } else {
                        throw ("nav not exits or more than one");
                    }
                }
            }
        };
    }]);

angular.module('chat.directive')
    .directive('phoneContact', function ($state, $ionicLoading,
        $ionicScrollDelegate, $timeout) {
        return {
            restrict: "E",
            templateUrl: 'module/chat/directives/phonecontact/phonecontact.tpl',
            replace: true,
            transclude : true,
            scope: {
                friendsList_local: "=friendsList",
                groupsList_local: "=groupsList",
            },
            link: function (scope, element, attrs, controller) {
                scope.initTalk = function (friendID, username, type, $event) {
                    $state.go('tab.chatDetail', {
                        messageId: '1', name: username, targetId: friendID,
                        conversationType: type
                    });
                    $event.stopPropagation();
                    $event.preventDefault();
                }
                // 联系人右边导航栏
                scope.cri = { DataValue: '' };
            }
        };
    });

angular.module('chat.directive')
    .directive('qqFace',function() {
        return {
            restrict: "E",
            templateUrl: 'module/chat/directives/qqface/qqface.tpl',
            replace: true,
            scope: {
                selectQqFace: "&selectQqFace"
            },
            link: function(scope, element, attrs, controller) {
                // 表情选择事件
                scope.chooseFace = function(evt) {
                    if (evt.srcElement.title) {
                        var text_content = document.querySelector("#text_content");
                        scope.selectQqFace()("[" + event.srcElement.title + "]");
                    }
                }
            }
        };
    });

angular.module('chat.directive')
    .directive('resFriendTeam', function ($ionicLoading, $timeout, ResFriend, ResTeam) {
        return {
            restrict: "E",
            templateUrl: 'module/chat/directives/resfriendteam/resfriendteam.tpl',
            replace: true,
            scope: {
                groupinviteList_local: "=groupinviteList",
                friendinviteList_local: "=friendinviteList",
                responseReq_local: "&responseReq",
            },
            link: function (scope, element, attrs, controller) {
                scope.responseReq_local = function (id, name, type, state, $index) {
                    if (type == "PRIVATE") {
                        // 好友请求 UserID, FriendID, state
                        ResFriend(curUID, id, state, callback);
                    } else {
                        // 团队邀请 groupID, MemberID, state
                        ResTeam(id, curUID, state, callback);
                    }
                    var showMsg = '';
                    function callback(data) {
                        // 成功后删掉记录并刷新好友列表
                        var obj = {};
                        if (type == "PRIVATE") {
                            if (state == '1') {
                                showMsg = "您已添加" + name + "为好友!";
                                // 同步至融云(可选，已在服务端做同步)
                            } else {
                                showMsg = "您已拒绝" + name + "的好友请求!";
                            }
                            $ionicLoading.show({
                                template: showMsg
                            });
                            // 添加到通讯录
                            obj.id = id;
                            obj.name = name;
                            obj.alpha = makePy(obj.name)[0][0].toUpperCase();
                            obj.conversationType = 'PRIVATE';
                            obj.portrait = null;
                            $timeout(function () {
                                $ionicLoading.hide();
                            }, 750);
                            scope.responseReq()(obj, $index);
                        } else {
                            if (state == '1') {
                                showMsg = "您已加入群" + name + "!";
                            } else {
                                showMsg = "您已拒绝加入群" + name + "!";
                            }
                            $ionicLoading.show({
                                template: showMsg
                            });
                            // 添加到通讯录
                            obj.id = 'cre_' + id;
                            obj.number = 10;
                            obj.max_number = 30;
                            obj.name = name;
                            obj.conversationType = 'GROUP';
                            obj.type = 'create';
                            obj.portrait = null;//'亿达别苑维修工_200.png';
                            $timeout(function () {
                                $ionicLoading.hide();
                            }, 750);
                            scope.responseReq()(obj, $index, type);
                        }
                    }
                }
            }
        };
    });

angular.module('chat.directive')
    .directive('searchAutoComplete', function ($parse, $http, $sce, $timeout, $rootScope) {
        return {
            restrict: 'EA',
            scope: {
                "id": "@id",
                "placeholder": "@placeholder",
                "selectCompany": "=selectcompany",
                "selectedObject": "=selectedobject",
                "searchStr": "@searchstr",
                "url": "@url",
                "paramName1": "@paramname",
                "dataField": "@datafield",
                "titleField": "@titlefield",
                "descriptionField": "@descriptionfield",
                "imageField": "@imagefield",
                "imageUri": "@imageuri",
                "inputClass": "@inputclass",
                "userPause": "@pause",
                "localData": "=localdata",
                "searchFields": "@searchfields",
                "minLengthUser": "@minlength",
                "matchClass": "@matchclass"
            },
            templateUrl: 'module/chat/directives/searchautocomplete/searchautocomplete.tpl',
            link: function ($scope, elem, attrs) {
                $scope.lastSearchTerm = null;
                $scope.currentIndex = null;
                $scope.justChanged = false;
                $scope.searchTimer = null;
                $scope.hideTimer = null;
                $scope.searching = false;
                $scope.pause = 500;
                $scope.minLength = 3;
                $scope.searchStr = null;

                if ($scope.minLengthUser && $scope.minLengthUser != "") {
                    $scope.minLength = $scope.minLengthUser;
                }
                if ($scope.userPause) {
                    $scope.pause = $scope.userPause;
                }
                isNewSearchNeeded = function (newTerm, oldTerm) {
                    return newTerm.length >= $scope.minLength && newTerm != oldTerm
                }
                $scope.processResults = function (responseData, str) {
                    if (responseData && responseData.length > 0) {
                        $scope.results = [];
                        var titleFields = [];
                        if ($scope.titleField && $scope.titleField != "") {
                            titleFields = $scope.titleField.split(",");
                        }
                        for (var i = 0; i < responseData.length; i++) {
                            // Get title variables
                            var titleCode = [];
                            for (var t = 0; t < titleFields.length; t++) {
                                titleCode.push(responseData[i][titleFields[t]]);
                            }
                            var description = "";
                            if ($scope.descriptionField) {
                                description = responseData[i][$scope.descriptionField];
                            }
                            var imageUri = "";
                            if ($scope.imageUri) {
                                imageUri = $scope.imageUri;
                            }
                            var image = "";
                            if ($scope.imageField) {
                                image = imageUri + responseData[i][$scope.imageField];
                            }
                            var text = titleCode.join(' ');
                            if ($scope.matchClass) {
                                var re = new RegExp(str, 'i');
                                var strPart = text.match(re)[0];
                                text = $sce.trustAsHtml(text.replace(re, '<span class="' + $scope.matchClass + '">' + strPart + '</span>'));
                            }
                            var resultRow = {
                                title: text,
                                description: description,
                                image: image,
                                originalObject: responseData[i]
                            }
                            $scope.results[$scope.results.length] = resultRow;
                        }
                    } else {
                        $scope.results = [];
                    }
                }

                $scope.searchTimerComplete = function (str) {
                    // Begin the search
                    if (str.length >= $scope.minLength) {
                        if ($scope.localData) {
                            var searchFields = $scope.searchFields.split(",");
                            var matches = [];
                            for (var i = 0; i < $scope.localData.length; i++) {
                                var match = false;
                                for (var s = 0; s < searchFields.length; s++) {
                                    match = match || (typeof $scope.localData[i][searchFields[s]] === 'string' &&
                                        typeof str === 'string' && $scope.localData[i][searchFields[s]].toLowerCase().indexOf(str.toLowerCase()) >= 0);
                                }
                                if (match) {
                                    matches[matches.length] = $scope.localData[i];
                                }
                            }
                            $scope.searching = false;
                            $scope.processResults(matches, str);
                        } else {
                            var paramename = '?' + encodeURIComponent($scope.paramName1) + '=' + encodeURIComponent(str);
                            paramename += '&company=' + encodeURIComponent($scope.selectCompany.title);
                            $http.get($scope.url + paramename, {}).
                                success(function (responseData, status, headers, config) {
                                    $scope.searching = false;
                                    // debugger;
                                    // (($scope.dataField) ? responseData[$scope.dataField] : responseData )
                                    $scope.processResults(responseData, str);
                                }).
                                error(function (data, status, headers, config) {
                                    console.log("error");
                                });
                        }
                    }
                }

                $scope.hideResults = function () {
                    $scope.hideTimer = $timeout(function () {
                        $scope.showDropdown = false;
                    }, $scope.pause);
                };

                $scope.resetHideResults = function () {
                    if ($scope.hideTimer) {
                        $timeout.cancel($scope.hideTimer);
                    };
                };
                $scope.hoverRow = function (index) {
                    $scope.currentIndex = index;
                }
                $scope.keyPressed = function (event) {
                    if (!(event.which == 38 || event.which == 40 || event.which == 13)) {
                        if (!$scope.searchStr || $scope.searchStr == "") {
                            $scope.showDropdown = false;
                            $scope.lastSearchTerm = null
                        } else if (isNewSearchNeeded($scope.searchStr, $scope.lastSearchTerm)) {
                            $scope.lastSearchTerm = $scope.searchStr
                            $scope.showDropdown = true;
                            $scope.currentIndex = -1;
                            $scope.results = [];
                            if ($scope.searchTimer) {
                                $timeout.cancel($scope.searchTimer);
                            }
                            $scope.searching = true;

                            $scope.searchTimer = $timeout(function () {
                                $scope.searchTimerComplete($scope.searchStr);
                            }, $scope.pause);
                        }
                    } else {
                        event.preventDefault();
                    }
                }
                $scope.selectResult = function (result) {
                    if ($scope.matchClass) {
                        result.title = result.title.toString().replace(/(<([^>]+)>)/ig, '');
                    }
                    $scope.searchStr = $scope.lastSearchTerm = result.title;
                    $timeout(function () {
                        $scope.selectedObject.title = result.title;
                        $scope.selectedObject.originalObject = result.originalObject;
                    }, 10);
                    //$rootScope.selectedObject = result;
                    $scope.showDropdown = false;
                    $scope.results = [];
                    //$scope.$apply();
                }

                var inputField = elem.find('input');

                inputField.on('keyup', $scope.keyPressed);
                elem.on("keyup", function (event) {
                    if (event.which === 40) {
                        if ($scope.results && ($scope.currentIndex + 1) < $scope.results.length) {
                            $scope.currentIndex++;
                            $scope.$apply();
                            event.preventDefault;
                            event.stopPropagation();
                        }
                        $scope.$apply();
                    } else if (event.which == 38) {
                        if ($scope.currentIndex >= 1) {
                            $scope.currentIndex--;
                            $scope.$apply();
                            event.preventDefault;
                            event.stopPropagation();
                        }

                    } else if (event.which == 13) {
                        if ($scope.results && $scope.currentIndex >= 0 && $scope.currentIndex < $scope.results.length) {
                            $scope.selectResult($scope.results[$scope.currentIndex]);
                            $scope.$apply();
                            event.preventDefault;
                            event.stopPropagation();
                        } else {
                            $scope.results = [];
                            $scope.$apply();
                            event.preventDefault;
                            event.stopPropagation();
                        }

                    } else if (event.which == 27) {
                        $scope.results = [];
                        $scope.showDropdown = false;
                        $scope.$apply();
                    } else if (event.which == 8) {
                        $scope.selectedObject = null;
                        $scope.$apply();
                    }
                });
            }
        };
    })
/// 字符转码
; angular.module('chat.filter', [])
    .filter('trustHtml', function ($sce) {
        return function (input) {
            return $sce.trustAsHtml(input);
        }
    });

'use strict';
angular.module('chat.route', [])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('tab.call', {
                cache: false,
                url: '/call/:contactName?isCalling',
                controller: 'CallCtrl',
                templateUrl: 'module/chat/pages/call/call.html'
            })
            .state('tab.chat', {
                url: '/chat',
                views: {
                    'tab-chat': {
                        templateUrl: 'module/chat/tpl/contacts.html',
                        controller: 'contacts'
                    }
                }
            })
            .state('tab.friendInfo', {
                url: '/friendInfo/:targetId/:targetName/:conversationType',
                cache: false,
                views: {
                    'tab-chat': {
                        templateUrl: 'module/chat/pages/friendinfo/friendinfo.html',
                        controller: 'friendInfoCtrl'
                    }
                }
            })
            .state('tab.groupInfo', {
                url: '/groupInfo/:targetId/:targetName/:groupType/:conversationType',
                cache: false,
                views: {
                    'tab-chat': {
                        templateUrl: 'module/chat/pages/groupinfo/groupinfo.html',
                        controller: 'groupInfoCtrl'
                    }
                }
            })
            .state('tab.chatDetail', {
                url: '/chat-detail',
                params: { messageId: null, name: null, targetId: null, conversationType: null },
                views: {
                    'tab-chat': {
                        templateUrl: 'module/chat/pages/chatdetail/chatdetail.html',
                        controller: 'chatDetail'
                    }
                }
            })
            .state('tab.addGroup', {
                url: '/addGroup',
                views: {
                    'tab-chat': {
                        templateUrl: 'module/chat/pages/addgroup/addgroup.html',
                        controller: 'addGroupCtrl'
                    }
                }
            })
            .state('tab.addGroupmember', {
                url: '/addGroupmember',
                params: { GroupID: null },
                views: {
                    'tab-chat': {
                        templateUrl: 'module/chat/pages/addgroupmember/addgroupmember.html',
                        controller: 'addGroupmember'
                    }
                }
            })
            .state('tab.addFriend', {
                url: '/addFriend',
                views: {
                    'tab-chat': {
                        templateUrl: 'module/chat/pages/addfriend/addfriend.html',
                        controller: 'addFriendCtrl'
                    }
                }
            });
    }]);

;
var chats = angular.module('chat.services', []);

// 用户全局引用
chats.factory('initRong', function ($rootScope, $state, RONGYUN_APPKEY) {
    function initRong(token) {
        $rootScope.arrMsgs = new Array();
        $rootScope.arrCons = new Array();
        // 融云初始化
        RongCloudLibPlugin.init({
            appKey: RONGYUN_APPKEY
        },
            function (ret, err) {
                if (ret) {
                    // alert('init:' + JSON.stringify(ret));
                }
                if (err) {
                    alert('init error:' + JSON.stringify(err));
                }
            }
        );
        RongCloudLibPlugin.setConnectionStatusListener(
            function (ret, err) {
                if (ret) {
                    // 只允许单用户登录
                    if (ret.result.connectionStatus == 'KICKED') {
                        alert('您的帐号已在其他端登录!');
                        $rootScope.hideTabs = false;
                        //$ionicHistory.clearCache();
                        $state.go('login');
                    }
                }
                if (err) {
                    alert('setConnectionStatusListener error:' + JSON.stringify(err));
                }
            }
        );
        // 建立连接
        RongCloudLibPlugin.connect({
            token: token
        },
            function (ret, err) {
                if (ret) {
                    $rootScope.$apply();
                }
                if (err) {
                    alert('init error:' + JSON.stringify(err));
                }
            }
        );
        // 消息接收
        RongCloudLibPlugin.setOnReceiveMessageListener(
            function (ret, err) {
                // 接收消息
                if (ret) {
                    $rootScope.arrMsgs.push(JSON.stringify(ret.result.message));
                    $rootScope.$apply();
                }
                if (err) {
                    alert('setOnReceiveMessageListener error:' + JSON.stringify(err));
                }
            }
        );
    }
    return {
        init: initRong
    };
})
    // 好友服务
    .factory('Friends', function (RequestUrl, Signaling, UserService, $interval, LOAD_FRIENDS_URL, HttpPromiseService) {
        var currentUser = UserService.getUserinfo();
        var loaded = false;
        var friends = [];
        var userids = [];
        var curUID = '';
        function getFriends(callback) {
            var params = {
                username: currentUser.username,
            };
            HttpPromiseService.getData(LOAD_FRIENDS_URL, params).then(function (data) {
                console.log(data);
                callback(data.friends);
            });
        }
        function loadData(callback) {
            getFriends(function (retdata) {
                friends = [];
                var dataLen = retdata.length;
                for (var i = 0; i < dataLen; i++) {
                    var obj = {};
                    obj.id = retdata[i]._id;
                    obj.name = retdata[i].nickname == null ? retdata[i].username : retdata[i].nickname;
                    obj.alpha = makePy(obj.name)[0][0].toUpperCase();
                    obj.conversationType = 'PRIVATE';
                    obj.online = '0';
                    obj.Mobile = "212312312222";//测试
                    obj.portrait = retdata[i].headimg ? (RequestUrl + 'Images/Photo/' + retdata[i].headimg) : null;
                    friends.push(obj);
                }
                // 按首字母排序
                friends = friends.sort(function (a, b) {
                    var bool = a.alpha > b.alpha;
                    return bool ? 1 : -1;
                });
                // 删除本人
                var retIndex;
                for (var i = 0; i < friends.length; i++) {
                    if (friends[i].id == curUID) {
                        retIndex = i;
                        break;
                    }
                }
                if (retIndex) {
                    friends.splice(retIndex, 1);
                }
                // 首字母索引位置计算
                var friendCount = friends.length;
                var nowalpha = '';
                var alphaCount = 0;
                for (var m = 0; m < friendCount; m++) {
                    var tmp = friends[m];
                    if (tmp.alpha != nowalpha) {
                        nowalpha = obj.alpha;
                        alphaCount++;
                    }
                    userids.push(tmp.id);
                }
                callback(friends);
                Signaling.emit('checkOnline', userids);
                checkOnlineCallback(callback);
            });
        }
        // 刷新在线列表(10s)
        $interval(function () {
            if (loaded) {
                Signaling.emit('checkOnline', userids);
            }
        }, 10000);
        // 获取在线列表
        function checkOnlineCallback(callback) {
            if (!loaded) {
                loaded = true;
                Signaling.on('checkOnline_suc', function (ids) {
                    var friendlistCount = friends.length;
                    for (var m = 0; m < friendlistCount; m++) {
                        var tmp = friends[m];
                        for (var n = 0; n < ids.length; n++) {
                            if (tmp.id == ids[n].id) {
                                friends[m].online = "1";
                            }
                        }
                    }
                    if (callback) {
                        callback(friends);
                    }
                });
            }
        }

        return {
            // 获取好友列表
            all: function (callback) {
                //return;
                if (friends.length > 0) {
                    callback(friends);
                } else {
                    loadData(callback);
                    $interval(function () {
                        loadData(callback);
                    }, 20000);
                }
            },
            // 获取单个好友
            get: function (friendId) {
                var retIndex = -1;
                for (var i = 0; i < friends.length; i++) {
                    if (friends[i].id == friendId) {
                        retIndex = i;
                        break;
                    }
                }
                return retIndex > -1 ? friends[retIndex] : null;
            },
            //（未启用）
            set: function (val) {
                friends = val;
            },
            //（未启用）
            add: function (friend) { }
        }
    })
    // 搜多用户添加好友
    .factory('SearchUsers', function (UserService, $interval, SEARCH_FRIENDS_URL, HttpPromiseService) {
        return {
            load: function (str) {
                var params = {
                    username: str
                }
                return HttpPromiseService.getData(SEARCH_FRIENDS_URL, params).then(function (data) {
                    return data;
                });
            }
        }
    })
    // 群组服务
    .factory('Groups', function (Signaling, UserService, $rootScope,
        $interval, LOAD_GROUPS_URL, HttpPromiseService) {
        var groups = [];
        var curUID = '';
        var currentUser = UserService.getUserinfo();
        // 后台请求数据
        function loadData(callback) {
            var params = {
                username: currentUser.username,
            };
            HttpPromiseService.getData(LOAD_GROUPS_URL, params).then(function (grouplist) {
                console.log(grouplist);
                groups = [];
                for (var i = 0; i < grouplist.length; i++) {
                    var group = {};
                    group.id = grouplist[i]._id;
                    group.name = grouplist[i].groupname;
                    group.number = 12;
                    group.max_number = 13;
                    group.conversationType = 'GROUP';
                    group.type = 'create';
                    group.members = grouplist[i].members;
                    groups.push(group);
                }
                callback(groups)
            });
        }

        return {
            all: function (callback) {
                if (groups.length > 0) {
                    callback(groups);
                } else {
                    loadData(callback);
                    $interval(function () {
                        loadData(callback);
                    }, 10000);
                    $rootScope.$on("change Project", function (evt, PCode, PName) {
                        loadData(callback);
                    });
                }
            },
            set: function (val) {
                groups = val;
            },
            get: function (groupId) {
                var retIndex = -1;
                for (var i = 0; i < groups.length; i++) {
                    if (groups[i].id == groupId) {
                        retIndex = i;
                        break;
                    }
                }
                return retIndex > -1 ? groups[retIndex] : null;
            },
            // 获取组内成员
            getGroupMembers: function (groupId, cb) {
                var retIndex = -1;
                for (var i = 0; i < groups.length; i++) {
                    if (groupId == groups[i].id) {
                        return cb(groups[i].members);
                    }
                }
                return [];
            }
        }
    })
    // 创建组
    .factory('CreateGroups', function (UserService, HttpPromiseService, CREATE_GROUP_URL) { // 成功
        var currentUser = UserService.getUserinfo();
        return {
            create: function (group) {
                var params = {
                    userid: currentUser._id,
                    groupname: group.name,
                    groupimg: '',
                    members: group.member
                };
                return HttpPromiseService.getData(CREATE_GROUP_URL, params);
            }
        }
    })
    // 发送加好友请求
    .factory('AddFriendRequest', function (UserService, HttpPromiseService, REQ_FRIEND_URL) { // 成功
        var currentUser = UserService.getUserinfo();
        return {
            init: function (friendid, cb) {
                var params = {
                    userid: currentUser._id,
                    friendid: friendid
                };
                HttpPromiseService.getData(REQ_FRIEND_URL, params).then(function (data) {
                    cb(data);
                });
            }
        }
    })
    // 发送入群请求
    .factory('AddGroupRequest', function (UserService, HttpPromiseService, REQ_GROUP_MEMBER_URL) { // 成功
        return {
            init: function (friendid, groupid, cb) {
                var currentUser = UserService.getUserinfo();
                var params = {
                    userid: currentUser._id,
                    friendid: friendid,
                    groupid: groupid
                };
                HttpPromiseService.getData(REQ_GROUP_MEMBER_URL, params).then(function (data) {
                    console.log(data);
                    cb(data);
                });
            }
        }
    })
    // 加载好友请求
    .service("FindFriendsReq", function ($http, httpXhr, $interval, UserService, HttpPromiseService, LOAD_FRIEND_REQUEST_URL) {
        var friendRquestList = [];
        var intervalid = 0;
        var currentUser = UserService.getUserinfo();
        function FindFriendsReq(callback) {
            var params = {
                username: currentUser.username,
            };
            HttpPromiseService.getData(LOAD_FRIEND_REQUEST_URL, params).then(function (res_friendlist) {
                friendRquestList = [];
                for (var i = 0; i < res_friendlist.length; i++) {
                    var reqfrom = res_friendlist[i].from;
                    console.log(res_friendlist);
                    var friendRquest = {};
                    friendRquest.id = reqfrom._id;
                    friendRquest.name = reqfrom.nickname;
                    friendRquest.info = "[" + reqfrom.nickname + "]" + "请求添加您为好友！";
                    friendRquest.portrait = reqfrom.headimg;
                    friendRquest.type = "PRIVATE";
                    friendRquestList.push(friendRquest);
                }
                callback(friendRquestList);
            });
        }

        var friendsReqApi = {
            all: function (userid, callback) {
                if (friendRquestList.length > 0) {
                    callback(friendRquestList);
                } else {
                    FindFriendsReq(userid, callback);
                    clearInterval(intervalid);
                    intervalid = $interval(function () {
                        FindFriendsReq(userid, callback);
                    }, 20000);
                }
            }
        };
        return friendsReqApi;
    })
    // 加载团队请求
    .service("findTeamsReq", function ($http, httpXhr, $interval, UserService, HttpPromiseService, LOAD_GROUP_REQUEST_URL) {
        var teamRquestList = [];
        var intervalid = 0;
        var currentUser = UserService.getUserinfo();
        function findTeamsReq(callback) {
            var params = {
                username: currentUser.username
            };
            HttpPromiseService.getData(LOAD_GROUP_REQUEST_URL, params).then(function (data) {
                console.log(data);
                teamRquestList = [];
                var dataLen = data.length;
                for (var i = 0; i < dataLen; i++) {
                    var groupRquest = {};
                    var tempdata = data[i];
                    groupRquest.id = tempdata.groupid._id;
                    groupRquest.name = tempdata.groupid.groupname;
                    groupRquest.info = (tempdata.from.nickname == null ? "(无名)" : tempdata.from.nickname) + "邀您加入群:" + "[" + tempdata.groupid.groupname + "]";
                    groupRquest.portrait = null;
                    groupRquest.type = "GROUP";
                    teamRquestList.push(groupRquest);
                }
                callback(teamRquestList);
            });
        }
        var teamsReqApi = {
            all: function (userid, callback) {
                if (teamRquestList.length > 0) {
                    callback(teamRquestList);
                } else {
                    findTeamsReq(userid, callback);
                    clearInterval(intervalid);
                    intervalid = $interval(function () {
                        findTeamsReq(userid, callback);
                    }, 10000);
                }
            }
        };
        return teamsReqApi;
    })
    // 好友请求服务
    .service("ResFriend", function ($http, httpXhr, $timeout, UserService, HttpPromiseService, RES_FRIEND_REQUEST) {
        // UserID 自己
        // FriendID:接收人
        // state{0：发邀请，1:接受，-1：拒绝}
        var currentUser = UserService.getUserinfo();
        function ResFriend(FriendID, state, callback) {
            var params = {
                userid: currentUser._id,
                friendid: FriendID,
                state: state
            };
            HttpPromiseService.getData(RES_FRIEND_REQUEST, params).then(function (data) {
                console.log(data);
                callback(data);
            });
        }
        return ResFriend;
    })
    // 群组请求服务
    .service("ResTeam", function ($http, httpXhr, $timeout, HttpPromiseService, RES_GROUP_REQUEST) {
        // groupID 群组名称
        // FriendID:发起请求的人
        // MemberID:自己
        // state{0：发邀请，1:接受，-1：拒绝}
        function ResTeam(groupID, FriendID, MemberID, state, callback) {
            var obj = { groupID: groupID.substr(4), MemberID: MemberID, state: state };
            var params = {
                userid: MemberID,
                friendid: FriendID,
                groupid: groupID,
                state: state
            };
            HttpPromiseService.getData(RES_GROUP_REQUEST, params).then(function (data) {
                debugger;
                console.log(data);
                callback(data);
            });
        }
        return ResTeam;
    })

    // 协同全局未读消息计算
    .service("chatUnreadMessage", function ($rootScope) {
        var messages = 0;
        var chatUnreadMessageservive = {
            getUnreadMessage: function () {
                return messages;
            },
            setUnreadMessage: function (val) {
                messages = val;
                $rootScope.chatUnreadMessageNum = val;
                return;
            },
            addUnreadMessage: function (val) {
                messages += val;
                $rootScope.chatUnreadMessageNum = messages;
                return;
            }
        }
        return chatUnreadMessageservive;
    })
    // 全局消息监听
    .service("newMessageEventService", function ($rootScope) {
        var msgService = {
            broadcast: function (data) {
                $rootScope.$broadcast("newMsg", data);
            },
            listen: function (callback) {
                $rootScope.$on("newMsg", callback);
            }
        };
        return msgService;
    })
    // 未读消息模拟（For PC）
    .service("unreadMessages", function ($http, $rootScope, $timeout) {
        var unreadMessages = [
            { unreadMessageCount: 2, latestMessage: 'ficl upi' },
        ];
        var util = {
            getUnreadList: function () {
                var arr = [{
                    targetId: 11,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat11!',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                }, {
                    targetId: 12,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat12!',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                }, {
                    targetId: 14,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat14!',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                }, {
                    targetId: 13,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat13!',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                }, {
                    targetId: 16,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat!12',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                },];
                // 模拟新消息
                $timeout(function () {
                    $rootScope.$broadcast("newMsg",
                        '{"targetId": 11, "senderUserId": 1, "sentTime":"2016-06-01 10:00", '
                        + '"content": {"text":"new message"}, "conversationType": "PRIVATE", "objectName": "RC:TxtMsg"}');
                }, 4000);
                return arr;
            },
        }
        return util;
    })
    // 黑名单服务
    .factory('Blacklist', function () {
        var lists = [
            { id: 'group1', username: 'group1', portrait: 'img/personPhoto.png' },
        ];
        return {
            all: function () {
                return lists;
            },
            set: function (val) {
                lists = val;
            },
            addOne: function (val) {
                lists.push(val);
            },
            removeOne: function (val) {
                for (var i = 0; i < lists.length; i++) {
                    if (lists[i].id == val) {
                        lists.splice(i, 1);
                        break;
                    }
                }
            },
            get: function (id) {
                // Simple index lookup
                var retIndex = -1;
                for (var i = 0; i < lists.length; i++) {
                    if (lists[i].id == id) {
                        retIndex = i;
                        break;
                    }
                }
                return retIndex > -1 ? lists[retIndex] : null;
            }
        }
    })
    // 格式化融云错误
    .factory('FormateRongyunErr', function (myNote) {
        return {
            formate: function (err) {
                var errcode = 1;
                if (err && err.code) {
                    errcode = err.code;
                } else if (err && err.result) {
                    errcode = err.result.code;
                }
                switch (errcode) {
                    case 30001:
                        myNote.myNotice('网络出现问题，请检查网络! 30001');
                        break;
                    case -10000:
                        myNote.myNotice('网络出现问题，请检查网络!-10000');
                        break;
                    case -1:
                        myNote.myNotice('初始化失败！重启试试？! -1');
                        break;
                    default:
                        break;
                }
            }
        }
    })
    // 融云服务
    .factory('rongyunService', function ($q, FormateRongyunErr) {
        return {
            /**
             * 获取历史数据
             */
            getConversationList: function (targetid, ctype) {
                var oldestMessageId = 0;
                var promise = $q.defer();
                RongCloudLibPlugin.getConversationList(
                    function (ret, err) {
                        if (ret) {
                            promise.resolve(ret);
                        }
                        if (err) {
                            FormateRongyunErr.formate(err);
                        }
                    }
                );
            },
            getHistoryMsg: function (targetid, ctype) {
                var oldestMessageId = 0;
                var promise = $q.defer();
                RongCloudLibPlugin.getHistoryMessages({
                    conversationType: ctype,
                    targetId: targetid,
                    count: 5,
                    oldestMessageId: oldestMessageId
                },
                    function (ret, err) {
                        if (ret) {
                            var result = new Array(),
                                tmp;
                            for (var i = ret.result.length - 1; i >= 0; i--) {
                                tmp = ret.result[i];
                                tmp = myUtil.resolveMsg(tmp);
                                result.push(tmp);
                            }
                            var hisArr = result.concat($scope.hisMsgs);
                            promise.resolve(hisArr);

                        }
                        if (err) {
                            alert("getHistoryMessages error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            sendMessage: function (ctype, target, content) {
                var promise = $q.defer();
                RongCloudLibPlugin.sendTextMessage({
                    conversationType: ctype,
                    targetId: target,
                    text: content,
                    extra: "extra text"
                },
                    function (ret, err) {
                        if (ret) {
                            //消息此时未发送成功，可以加入样式标明
                            if (ret.status == "prepare") {
                                // alert('你发了文字消息：' +JSON.stringify(ret));
                                promise.resolve(ret.result.message);
                            }
                            //成功后更新样式
                            if (ret.status == "success") {
                                // alert("success");
                            }
                        }
                        if (err) {
                            alert("发送文本消息 error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            clearMessagesUnreadStatus: function (conversationType, targetId) {
                var promise = $q.defer();
                RongCloudLibPlugin.clearMessagesUnreadStatus({
                    conversationType: conversationType,
                    targetId: targetId
                },
                    function (ret, err) {
                        promise.resolve(ret);
                        if (err) {
                            alert("标为已读 error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            getLatestMsg: function (targetid, ctype) {
                var promise = $q.defer();
                RongCloudLibPlugin.getLatestMessages({
                    conversationType: ctype,
                    targetId: targetid,
                    count: 15
                },
                    function (ret, err) {
                        //alert("getLatestMessages ret:" + JSON.stringify(ret));
                        if (ret) {
                            var result = [];
                            var tmp;
                            for (var i = ret.result.length - 1; i >= 0; i--) {
                                tmp = ret.result[i];
                                if (ctype == "GROUP" && members.length > 0) {
                                    for (var m = 0; m < members.length; m++) {
                                        if (members[m].id == tmp.senderUserId) {
                                            tmp.name = members[m].name;
                                        }
                                    }
                                }
                                tmp = myUtil.resolveMsg(tmp);
                                // 处理IOS倒序顺序bug
                                if (isIOS) {
                                    result.push(tmp);
                                } else {
                                    result.unshift(tmp);
                                }
                            }
                            promise.resolve(result);
                        }
                        if (err) {
                            alert("getLatestMessages error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            sendImageMessage: function (ctype, targetId, imageURI) {
                var isIOS = ionic.Platform.isIOS();
                var isAndroid = ionic.Platform.isAndroid();
                var picPath = imageURI;
                if (isIOS) {
                    picPath = imageURI.replace('file://', '');
                }
                if (isAndroid) {
                    if (imageURI.indexOf('?') !== -1) {
                        picPath = imageURI.substring(0, imageURI.indexOf('?'));
                    } else { }
                }
                var promise = $q.defer();
                RongCloudLibPlugin.sendImageMessage({
                    conversationType: ctype,
                    targetId: targetId,
                    imagePath: picPath,
                    extra: ""
                },
                    function (ret, err) {
                        if (ret) {
                            //消息此时未发送成功，可以加入样式标明；成功后更新样式
                            if (ret.status == "prepare") {
                                // alert("prepare");
                                promise.resolve(ret.result.message);

                            }
                            if (ret.status == "success") {
                                //alert("success");
                            }
                        }
                        if (err) {
                            alert("sendImageMessage error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            sendVoiceMessage: function (ctype, targetId, tmpPath, dur) {
                var promise = $q.defer();
                // 发送语音消息
                RongCloudLibPlugin.sendVoiceMessage({
                    conversationType: ctype,
                    targetId: targetId,
                    voicePath: tmpPath,
                    duration: dur,
                    extra: ""
                },
                    function (ret, err) {
                        if (ret) {
                            $scope.lstResult = "sendVoiceMessage:" + JSON.stringify(ret);
                            // TODO:消息此时未发送成功，可以加入样式标明；成功后更新样式
                            if (ret.status == "prepare") {
                                // alert("sendVoiceMessage prepare2:" + JSON.stringify(ret));
                                promise.resolve(data);
                            }
                            // TODO:后续加入发送成功后修改显示样式
                            if (ret.status == "success") {
                                // alert("success");
                            }
                        }
                        if (err) { // TODO:这里需要对错误状态进行判断并友好的提示用户
                            alert("语音消息输入过短! ");
                            //alert("语音消息发送错误: " + JSON.stringify(err));
                        }
                    }
                );
            },
            clearConversition: function (ctype, targetId, tmpPath, dur) {
                var promise = $q.defer();
                RongCloudLibPlugin.clearConversations({
                    conversationTypes: ["PRIVATE", "GROUP"]
                },
                    function (ret, err) {
                        if (ret) {
                            alert("已清除所有会话: " + result.status);
                            promise.resolve();
                        }
                        if (err) {
                            FormateRongyunErr.formate(err);
                        }
                    }
                );
            },
            clearMessagesUnreadStatus: function (targetid, ctype) {
                var promise = $q.defer();
                RongCloudLibPlugin.clearMessagesUnreadStatus({
                    conversationType: type,
                    targetId: targetId
                }, function (ret, err) {
                    // test succeed
                    promise.resolve();
                    if (err) {
                        FormateRongyunErr.formate(err);
                    }
                });
            },
            removeConversation: function (targetid, ctype) {
                var promise = $q.defer();
                RongCloudLibPlugin.removeConversation({
                    conversationType: type,
                    targetId: targetId
                }, function (ret, err) {
                    promise.resolve();
                    //alert(ret.status);
                    if (err) {
                        FormateRongyunErr.formate(err);
                    }
                });
            }
        }
    })
    // 媒体服务(音频)
    .factory('mediaService', function () {
        var isIOS = ionic.Platform.isIOS();
        var isAndroid = ionic.Platform.isAndroid();
        var mediaRec;
        var path = "";
        var src = "cordovaIMVoice.amr";
        if (window.cordova && isIOS) {
            path = cordova.file.documentsDirectory;
            src = "cordovaIMVoice.wav";
        } else if (window.cordova) {
            path = cordova.file.externalApplicationStorageDirectory;
        }
        function getMediaURL(s) {
            if (device.platform.toLowerCase() === "android") return path + s;
            return (path + s).replace('file://', '');
        }
        function getNewMediaURL(s) {
            if (device.platform.toLowerCase() === "android") return path + s;
            return "documents://" + s;
        }
        function getPhoneGapPath() {
            // bug
            var path = window.location.pathname;
            path = path.substr(path, path.length - 9);
            if (isIOS) {
                return 'img/vedio-chat.mp3';
            } else {
                //alert('file://' + path + 'img/vedio-chat.mp3');//路径有问题
                return 'file://' + path + 'img/vedio-chat.mp3';
            }
        };
        return {
            playSound: function () {
                //实例化录音类, src:需要播放的录音的路径
                var ring = new Media(getPhoneGapPath(),
                    function () {
                    }, function (err) {
                    }
                );
                //开始播放录音
                ring.play();
            },
            startRecord: function () {
                if (mediaRec) {
                    mediaRec.release();
                }
                //实例化录音类
                mediaRec = new Media(getNewMediaURL(src),
                    function () { },
                    function (err) { }
                );
                //开始录音
                mediaRec.startRecord();
            },
            finishRecord: function () {
                var promise = $q.defer();
                if (mediaRec) {
                    mediaRec.stopRecord();
                    mediaRec.release();
                }
                //实例化录音类, src:需要播放的录音的路径
                mediaRec = new Media(getMediaURL(src),
                    function () {
                        console.log("touchend():Audio Success");
                    },
                    function (err) {
                        console.log("touchend():Audio Error: " + err.code);
                    }
                );
                mediaRec.play();
                mediaRec.stop();

                //在html中显示当前状态
                var counter = 0;
                var timerDur = setInterval(function () {
                    counter = counter + 100;
                    if (counter > 2000) {
                        clearInterval(timerDur);
                    }
                    var dur = mediaRec.getDuration();
                    if (dur > 0) {
                        clearInterval(timerDur);
                        // alert('mediaRec.getDuration():' + dur);
                        // alert('mediaRec.src:' + mediaRec.src);
                        var tmpPath = mediaRec.src;
                        if (isIOS) {
                            tmpPath = path + src;
                        }
                        tmpPath = tmpPath.replace('file://', '');
                        promise.resolve(tmpPath, mediaRec);
                    }
                }, 100);
            }
        }
    })
    // phonertc服务
    .factory('phoneRTCService', function () {
        return {
            createSession: function (isInitiator) {
                if (isInitiator) {
                    sendMessage('[发起视频通话]');
                }
                console.log(new Date().toString() + ': calling to ' +
                    contactName + ', isInitiator: ' + isInitiator);
                // 自个部署的服务器turn server
                var config = {
                    isInitiator: isInitiator,
                    stun: {
                        host: 'stun:115.29.51.196'
                    },
                    turn: {
                        host: 'turn:115.29.51.196',
                        username: 'test',
                        password: 'test'
                    },
                    streams: {
                        audio: true, // 支持音频
                        video: true, // 支持视频
                    }
                };

                var session = new cordova.plugins.phonertc.Session(config);
            }
        }
    });

angular.module('chat.controllers', [])

    /**聊天界面 */
    .controller('contacts', function ($scope, $state,
        $ionicScrollDelegate, $timeout, $interval, Friends, Groups, $rootScope,
        newMessageEventService, FindFriendsReq, findTeamsReq, rongyunService,
        unreadMessages, chatUnreadMessage,Signaling) {
        Signaling.emit('login', 'cc', 'cc', 'cc');
        // 标记在线
        Signaling.on('login_successful', function (info) {
            console.log('i am here!');
        });
        $scope.data = {
            searchword: ''
        };
        $scope.clearKeyword = function (data) {
            data.scorearchword = '';
        }
        // === tab切换[消息/联系人] ===
        if (!$scope.currentFeedsType) {
            $scope.currentFeedsType = "contacttab";
        }
        $scope.messagetab = "messagetab";
        $scope.contacttab = "contacttab";
        var scrollPositonRec = { 'top': 0, 'left': 0 };
        var scrollPositonJob = { 'top': 0, 'left': 0 };
        $scope.tabswitch = function (feedsType) {
            if ($scope.currentFeedsType == "messagetab") {
                scrollPositonRec = $ionicScrollDelegate.getScrollPosition();
            } else if ($scope.currentFeedsType == "contacttab") {
                scrollPositonJob = $ionicScrollDelegate.getScrollPosition();
            }

            if (feedsType == "messagetab") {
                $ionicScrollDelegate.scrollTo(scrollPositonRec.left, scrollPositonRec.top);
            } else if (feedsType == "contacttab") {
                $ionicScrollDelegate.scrollTo(scrollPositonJob.left, scrollPositonJob.top);
            }

            $scope.currentFeedsType = feedsType;
        }

        $scope.groups = [];
        $scope.friends_list = [];
        $scope.friends_message = [];
        // 好友/团队邀请
        $scope.friendinviteList = [];
        $scope.groupinviteList = [];
        // 加载好友列表
        $scope.navCharArray = [];
        Friends.all(function (data) {
            $scope.friends_list = data;
            var alphaArr = [];
            var alpha_now = '';
            for (var i = 0; i < data.length; i++) {
                if (alpha_now != data[i].alpha) {
                    alphaArr.push({
                        firstChar: data[i].alpha,
                        id: data[i].id
                    });
                    alpha_now = data[i].alpha;
                }
            }
            $scope.navCharArray = alphaArr;
        });
        // 加载群组
        Groups.all(function (data) {
            $scope.groups = data;
        });
        // 加载好友邀请
        FindFriendsReq.all(function (data) {
            $scope.friendinviteList = data;
        });

        $scope.navCallBack = function () { }

        // 加载群组邀请
        findTeamsReq.all(function (data) {
            $scope.groupinviteList = data;
        });
        // 同意与拒绝请求,成功后删掉记录并刷新好友列表
        function responseReq(obj, $index, type) {
            if (type == "PRIVATE") {
                $scope.friends_list.unshift(obj);
                $timeout(function () {
                    $scope.friendinviteList.splice($index, 1);
                }, 400);
            } else {
                $scope.groups.unshift(obj);
                $timeout(function () {
                    $scope.groupinviteList.splice($index, 1);
                }, 400);
            }
        }
        // 添加团队与添加好友
        $scope.addGroup = function () {
            $state.go('tab.addGroup');
        };
        $scope.addFriend = function () {
            $state.go('tab.addFriend');
        };

        // === 融云消息监听 ===
        var newMsgCallBack = function (d, data) {
            jsonMsg = JSON.parse(data);
            jsonMsg.unreadMessageCount = "1";
            var target;
            var groupMemberinfo = null;
            if (jsonMsg.conversationType == "PRIVATE") {
                var friends = $scope.friends_list;
                var friend_nums = friends.length;
                for (var i = 0; i < friend_nums; i++) {
                    if (friends[i].id == jsonMsg.targetId) {
                        target = friends[i];
                        break;
                    }
                }
            } else if (jsonMsg.conversationType == "GROUP") {
                var groups = $scope.groups;
                var groups_nums = groups.length;
                for (var i = 0; i < groups_nums; i++) {
                    if (groups[i].id == jsonMsg.targetId) {
                        target = groups[i];
                        groupMemberinfo = Groups.getGroupMember(jsonMsg.targetId, jsonMsg.senderUserId);
                        break;
                    }
                }
            }
            jsonMsg = myUtil.resolveCon(jsonMsg, 1, target, groupMemberinfo);
            var friends_message = $scope.friends_message;
            var friendLen = friends_message.length;
            for (var i = 0; i < friendLen; i++) {
                if (friends_message[i].targetId == jsonMsg.targetId) {
                    $scope.friends_message[i].unreadMessageCount = $scope.friends_message[i].unreadMessageCount + 1;
                    $scope.friends_message[i].latestMessage = jsonMsg.latestMessage;
                    return;
                }
            }
            // alert('NEW MEG push now');
            $scope.friends_message.push(jsonMsg);
        }
        newMessageEventService.listen(newMsgCallBack);
        // 清除所有会话
        $scope.clearConversition = function () {
            rongyunService.clearConversations().then(function () {
                $scope.$apply(function () {
                    $scope.friends_message = [];
                });
            });
        }
        // 将某人消息设为已读
        function clearSomeoneConversition(targetId, type) {
            rongyunService.clearMessagesUnreadStatus(targetId, type).then(function () { });
        }
        // 将某人消息删除
        function removeSomeoneConversition(targetId, type) {
            rongyunService.removeConversation(targetId, type).then(function () { });
        }

        // 是否已存在消息
        function findInFriends(val) {
            var friends_message = $scope.friends_message;
            var friendLen = friends_message.length;
            for (var i = 0; i < friendLen; i++) {
                if (friends_message[i].targetId == val) {
                    return i;
                }
            }
            return -1;
        }

        // 设为已读
        $scope.markMessage = function (index) {
            var message = $scope.friends_message[index];
            chatUnreadMessage.addUnreadMessage(-message.unreadMessageCount);
            message.unreadMessageCount = 0;
            clearSomeoneConversition(message.targetId, message.conversationType);
        };
        // 删除消息
        // TODO：需要清除消息状态，否则刷新后会再出来(待测)
        $scope.deleteMessage = function (index) {
            var message = $scope.friends_message[index];
            chatUnreadMessage.addUnreadMessage(-message.unreadMessageCount);
            $scope.friends_message.splice(index, 1);
            removeSomeoneConversition(message.targetId, message.conversationType);
        };

        $scope.gotoChatDetils = function (friend, $index) {
            // 清空未读消息
            $scope.friends_message[$index].unreadMessageCount = 0;
            var target;
            if (friend.conversationType == "PRIVATE") {
                var friends = $scope.friends_list;
                var friend_nums = friends.length;
                for (var i = 0; i < friend_nums; i++) {
                    if (friends[i].id == friend.targetId) {
                        target = friends[i];
                        break;
                    }
                }
            } else if (friend.conversationType == "GROUP") {
                var groups = $scope.groups;
                var groups_nums = groups.length;
                for (var i = 0; i < groups_nums; i++) {
                    if (groups[i].id == friend.targetId) {
                        target = groups[i];
                        break;
                    }
                }
            }
            // 转到聊天主界面
            var name = target ? target.name : '[陌生人]';
            $state.go("tab.chatDetail", { targetId: friend.targetId, name: name, conversationType: friend.conversationType });
        }
        // 获取消息列表
        var getConversationList = function () {
            rongyunService.getConversationList().then(function (result) {
                var resultLen = result.length;
                var target;
                var groupMemberinfo = null;
                for (var i = 0; i < resultLen; i++) {
                    if (result[i].conversationType == "PRIVATE") {
                        target = Friends.get(result[i].targetId);
                    } else if (result[i].conversationType == "GROUP") {
                        target = Groups.get(result[i].targetId);
                        try {
                            groupMemberinfo = Groups.getGroupMember(result[i].targetId, result[i].senderUserId);
                        } catch (e) {
                            alert('groupMemberinfo err:' + JSON.stringify(e));
                            break;
                        }
                    }
                    result[i] = myUtil.resolveCon(result[i], 0, target, groupMemberinfo);
                }
                var messageLen = 0;
                for (var j = 0; j < resultLen; j++) {
                    var index = findInFriends(result[j].targetId);
                    if (index == -1) {
                        $scope.friends_message.push(result[j]);
                        messageLen += result[j].unreadMessageCount;
                    } else {
                        $scope.friends_message[index].unreadMessageCount = result[j].unreadMessageCount;
                        $scope.friends_message[index].latestMessage = result[j].latestMessage;
                        messageLen += result[j].unreadMessageCount;
                    }
                }
                chatUnreadMessage.setUnreadMessage(messageLen);
            });
        }
        // 融云初始化
        var init = function () {
            $scope.friends_message = [];
            // TODO:立即加载在信息联系人未加载完成的情况下失效
            // getConversationList();
            $interval(function () {
                getConversationList();
            }, 3000);
        }

        //init();

        initTest();
        function initTest() {
            $scope.friends_message = [];
            var messageLen = 0;
            $interval(function () {
                var ms = unreadMessages.getUnreadList();
                ms = myUtil.resolveCon(ms, 0, null);
                var msLen = ms.length;
                messageLen = 0;
                for (var j = 0; j < msLen; j++) {
                    var index = findInFriends(ms[j].targetId);
                    if (index == -1) {
                        messageLen += ms[j].unreadMessageCount;
                        $scope.friends_message.push(ms[j]);
                    } else {
                        $scope.friends_message[index].unreadMessageCount = ms[j].unreadMessageCount;
                        messageLen += ms[j].unreadMessageCount;
                        $scope.friends_message[index].latestMessage = ms[j].latestMessage;
                    }
                }
                chatUnreadMessage.setUnreadMessage(messageLen);
            }, 10000);
        }
    });

angular.module('chat.controllers')
    .controller('addFriendCtrl', function ($scope, SearchUsers, AddFriendRequest) {
        $scope.friendResults = [];
        $scope.username = '';

        /**
         * 监测搜索名称
         */
        $scope.$watch('username', function (newValue, oldValue) {
            if (newValue != "" && newValue != oldValue) {
                search(newValue);
            }
        });

        /*
        * 清空输入
        */
        $scope.searchClear = function () {
            $scope.username = '';
            $scope.friendResults = [];
        }
        function search(name) {
            SearchUsers.load(name).then(function (data) {
                var ret = [];
                for (var i = 0; i < data.length; i++) {
                    ret.push({
                        nickname: data[i].nickname,
                        _id: data[i]._id
                    });
                }
                $scope.friendResults = ret;
            });
        };

        /*
        * 发起添加好友请求
        */
        $scope.add = function (FriendID) {
          
            //AddFriendRequest(FriendID,function(data){});
        };
    });
angular.module('chat.controllers')
    .controller('addGroupCtrl', function ($scope, $ionicPopup, HttpFactory,
        $ionicHistory, $cordovaContacts, myNote, $timeout, Friends, CreateGroups) {
        $scope.group = {};
        var myPopup = $ionicPopup.show({
            template: '<input type="text" ng-model="group.name">',
            title: '输入组名：',
            scope: $scope,
            buttons: [{
                text: '取消',
                onTap: function (e) {
                    $ionicHistory.goBack(-1);
                }
            }, {
                text: '<b>保存</b>',
                type: 'button-positive',
                onTap: function (e) {
                    if (!$scope.group.name) {
                        myNote.myNotice('组名不能为空！', 3000);
                        e.preventDefault();
                    }
                }
            }
            ]
        });
        myPopup.then(function () {
            myPopup.close();
        });
        Friends.all(function (friends) {
            for (var i = 0; i < friends.length; i++) {
                friends[i].checked = false;
            }

            $scope.friends = friends;
        });

        $scope.sure = function () {
            console.log("$scope.friends:", $scope.friends);
            $scope.group.member = [];
            angular.forEach($scope.friends, function (data) {
                if (!!data.checked) {
                    $scope.group.member.push(data.id);
                }
            });
            creategroup($scope.group);
        };

        function creategroup(team) {
            CreateGroups.create(team).then(function (data) {
                console.log(data);
                if(data.state == -1){
                    alert("创建失败！");
                }else if(data.state = 1){
                    alert("创建成功！");
                }
                $ionicHistory.goBack(-1);
            });
        }

        /**
         * 从通讯录中获取好友 (TODO)
         */
        $scope.getAllContacts = function () {
            var options = {};
            options.multiple = true;
            $cordovaContacts.find(options).then(function (allContacts) {
                // omitting parameter to .find() causes all contacts to be returned
                $scope.contacts = allContacts;
                alert(angular.toJson($scope.contacts[0]));
            }, function (err) {
                alert(err);
            });
        };
    });
angular.module('chat.controllers')
    .controller('chatDetail', function ($scope, $rootScope, $stateParams, newMessageEventService, CacheFactory,
        $ionicScrollDelegate, $timeout, $state, Friends, Groups, $interval, $ionicModal, PhotoAndImages,
        rongyunService, mediaService) {
        var viewScroll = $ionicScrollDelegate.$getByHandle('messageDetailsScroll');
        /***
         * bugfix purpose
         */
        $scope.fixReflowtag = false;
        var targetId = $stateParams.targetId;
        var conversationType = $stateParams.conversationType;
        $scope.name = $stateParams.name ? $stateParams.name : "";
        $scope.conversationType = conversationType;
        // 加载成员，用于显示姓名
        if ($scope.conversationType == "GROUP") {
            getGroupMem();
        }
        var members = [];
        function getGroupMem() {
            if (targetId && targetId.substr(0, 4) == "cre_") {
                getGroupMembers(targetId.substr(4), callback);
            }
            function callback(data) {
                var data = data.data;
                var length = data.length;
                for(var i = 0; i < length; i++) {
                    var obj = {};
                    obj.id = data[i].UserID;
                    obj.name = data[i].UserName;
                    members.push(obj);
                }
                getLatestMsg(targetId, "GROUP");
            }
        }

        // 语音消息交互(BEGIN)
        $scope.recordWait = false;
        $scope.isStartRecord = false;
        $scope.onVoiceHold = function () {
            $scope.isStartRecord = true;
            $scope.recordWait = false;
            try {
                //实例化录音类
                VoicechangeAnimation();
                mediaService.startRecord();
                return false;
            } catch (err) {
                dialog.show('err m:' + err)
            }
        }
        $scope.onVoiceRelease = function () {
            $scope.recordWait = true;
            $timeout(function () {
                $scope.isStartRecord = false;
            }, 1000);
            mediaService.finishRecord().then(function (tmpPath, mediaRec) {
                rongyunService.sendVoiceMessage(conversationType,
                    targetId, tmpPath, dur).then(function (data) {
                        mediaRec.release();
                        appendNewMsg(data, true);
                    });
            });
            return false;
        }
        //  工具栏交互
        $scope.send_content = {
            text: ''
        };
        $scope.showPhonebar = false;
        $scope.onShowPhonebar = function () {
            if (!$scope.showPhonebar) {
                $scope.showPhonebar = true;
                $scope.showWXFace = false;
                scrolltoBottom();
            } else if ($scope.showPhonebar && $scope.showWXFace) {
                $scope.showWXFace = false;
            } else if ($scope.showPhonebar && !$scope.showWXFace) {
                $scope.showPhonebar = false;
            }
        }
        $scope.showWXFace = false;
        $scope.onShowWXFace = function () {
            if (!$scope.showPhonebar) {
                $scope.showPhonebar = true;
                $scope.showWXFace = true;
                scrolltoBottom();
                document.querySelector("#text_content").focus();
            } else if ($scope.showPhonebar && !$scope.showWXFace) {
                $scope.showWXFace = true;
                document.querySelector("#text_content").focus();
            } else if ($scope.showPhonebar && $scope.showWXFace) {
                $scope.showPhonebar = false;
                $scope.showWXFace = false;
            }
        }
        $scope.selectQQFace = function (text_content) {
            $scope.send_content.text = $scope.send_content.text + text_content;
            document.querySelector("#text_content").focus();
        }
        // 拉取历史消息
        $scope.doRefresh = function () {
            console.log('Refreshing!');
            $timeout(function () {
                // 拉取历史消息
                rongyunService.getHistoryMsg(targetId, conversationType)
                    .then(function (data) {
                        $scope.hisMsgs = data;
                    });
                $scope.$broadcast('scroll.refreshComplete');
            }, 200);
        };
        $scope.onSendTextMessage = function () {
            var message = $scope.send_content.text;
            sendMessage(conversationType, targetId, message);
            $scope.send_content.text = '';
            scrolltoBottom();
        }
        $scope.hisMsgs = [];
        var init = function () {
            if (conversationType == 'PRIVATE') {
                getLatestMsg(targetId, 'PRIVATE');
            }
            clearMessagesUnreadStatus();
        }
        //init();

        // ===  融云消息处理(BEGIN) ===
        // 发送文本消息
        function sendMessage(ctype, target, content) {
            rongyunService.sendMessage(ctype, target, content).then(function (data) {
                appendNewMsg(data, true);
            })
        }
        // 标为已读
        function clearMessagesUnreadStatus() {
            var ctype = conversationType;
            var targetid = targetId;
            rongyunService.clearMessagesUnreadStatus(ctype, target).then(function (data) {
            });
        }
        // 获取最新消息
        function getLatestMsg(targetid, ctype) {
            rongyunService.getLatestMsg(targetid, ctype).then(function (data) {
                $scope.hisMsgs = result;
                scrolltoBottom();
            });
        }
        $scope.sendPhoto = sendPhoto;
        // 发送图片(chattoolbar发起)
        function sendPhoto(imageURI) {
            rongyunService.sendImageMessage(conversationType, targetId, imageURI).then(function (data) {
                appendNewMsg(data, true);
            });
        };
        // ===  融云消息处理(END) ===

        // 滚动至底部(有bug)
        function scrolltoBottom() {
            $timeout(function () {
                viewScroll.scrollBottom(true);
            }, 50);
            $scope.fixReflowtag = !$scope.fixReflowtag;
        }

        // 添加新消息
        function appendNewMsg(msg, flag) {
            var curMsg = myUtil.resolveMsg(msg);
            $scope.hisMsgs.push(curMsg);
            scrolltoBottom();
        }

        // 模拟声音大小变化
        $scope.voiceImg = { url: 'assets/img/voice/recog000.png' };
        function VoicechangeAnimation() {
            var voicechange = $interval(function () {
                if (!$scope.recordWait) {
                    var i = Math.round(Math.random() * 9);
                    $scope.voiceImg.url = 'img/voice/recog00' + i + '.png';
                } else {
                    voicechange = undefined;
                }
            }, 400);
        }
        // 视频通话
        $scope.onVoiceCall = function () {
            //alert('chatdetial:' + targetId);
            var obj = { isCalling: true, contactName: targetId };
            $state.go('tab.call', obj);
        }
        $scope.onVedioCall = function () {
            //alert('chatdetial:' + targetId);
            var obj = { isCalling: true, contactName: targetId };
            $state.go('tab.call', obj);
        }
        // 初次加载
        $scope.$on("$ionicView.enter", function () {
            scrolltoBottom();
            console.log('chatdetial.enter');
        });
        window.addEventListener("native.keyboardshow", function (e) {
            scrolltoBottom();
        });

        // 监听消息发送事件(实时刷新消息)
        var newMsgCallBack = function (d, data) {
            var jsonMsg = JSON.parse(data);
            if (targetId == jsonMsg.targetId) {
                // clearMessagesUnreadStatus();
                // 获取群成员姓名
                if (jsonMsg.conversationType == "GROUP") {
                    if (members.length > 0) {
                        for (var m = 0; m < members.length; m++) {
                            if (members[m].id == jsonMsg.senderUserId) {
                                jsonMsg.name = members[m].name;
                            }
                        }
                    }
                }
                console.log('jsonMsg:', jsonMsg);
                var tmpMsg = myUtil.resolveMsg(jsonMsg);
                $scope.hisMsgs.push(tmpMsg);
                scrolltoBottom();
            }
        };
        newMessageEventService.listen(newMsgCallBack);
    })

angular.module('chat.controllers')
.controller('friendInfoCtrl', function ($scope, Friends, Blacklist, $state, $ionicLoading,
     $stateParams, $timeout, ResFriend) {
        $scope.Target = Friends.get($stateParams.targetId);
        var targetId = $stateParams.targetId;
        var targetName = $stateParams.targetName;
        $scope.isFriend = true;

        // 非好友
        if ($scope.Target == null) {
            $scope.isFriend = false;
            $scope.Target = { name: targetName, id: targetId };
        }

        $scope.settings = {
            inBlackList: false
        };
        var lists = Blacklist.all();
        if (!lists.length) {
            // 获取黑名单
            RongCloudLibPlugin.getBlacklist(
                function (ret, err) {
                    if (ret) {
                        console.log('getBlacklist:' + JSON.stringify(ret));
                        var userinfo;
                        for (var i = 0; i < ret.result.length; i++) {
                            userinfo = Friends.get(ret.result[i]);
                            lists.push({ id: ret.result[i], username: userinfo.username, portrait: userinfo.portrait });
                        }
                        Blacklist.set(lists);
                        console.log('Blacklist:' + JSON.stringify(Blacklist.all()));
                        console.log($stateParams.targetId);
                        console.log(JSON.stringify(Blacklist.get($stateParams.targetId)));
                        if (Blacklist.get($stateParams.targetId))
                            $scope.settings.inBlackList = true;
                    }
                    if (err) {
                        console.log('logout error:' + JSON.stringify(err));
                        alert('logout error:' + JSON.stringify(err));
                    }
                }
            );
        }
        else {
            if (Blacklist.get($stateParams.targetId))
                $scope.settings.inBlackList = true;
        }

        // 发送消息,跳转到聊天界面
        $scope.sendMsg = function () {
            //alert('p y is here ready to home:' + $stateParams.targetId + ":" + $stateParams.conversationType);
            $state.go('tab.chatDetail', {
                messageId: '1', name: targetName, targetId: targetId,
                conversationType: $stateParams.conversationType
            });
        }

        //////////////////////////////////////ws////////////////////////////////////////////////
        // 直接视频聊天
        $scope.vedioChat = function () {
            //alert('chatdetial:' + $stateParams.targetId);
            var obj = { isCalling: true, contactName: $stateParams.targetId };
            $state.go('call', obj);
        }

        // 添加陌生人为好友
        $scope.addFriend = function () {
            // 0 为发送好友请求
            ResFriend(targetId, 0, function () {
                // 成功后删掉记录并刷新好友列表
                var showMsg = "您已发送好友请求!";
                $ionicLoading.show({
                    template: showMsg
                });
                $timeout(function () {
                    $ionicLoading.hide();
                }, 750);
            });
        }

        // 添加/移除黑名单
        $scope.chBlackList = function () {
            if ($scope.settings.inBlackList) {
                RongCloudLibPlugin.addToBlacklist({ userId: $stateParams.targetId },
                    function (ret, err) {
                        if (ret) {
                            alert('加入黑名单成功!');
                            var userinfo = Friends.get($stateParams.targetId);
                            Blacklist.addOne({ id: $stateParams.targetId, username: userinfo.username,
                                portrait: userinfo.portrait });
                        }
                        if (err) {
                            alert('addToBlacklist error:' + JSON.stringify(err));
                        }
                    }
                );
            }
            else {
                RongCloudLibPlugin.removeFromBlacklist({ userId: $stateParams.targetId },
                    function (ret, err) {
                        if (ret) {
                            Blacklist.removeOne($stateParams.targetId);
                            alert('移出黑名单成功!');
                        }
                        if (err) {
                            alert('removeFromBlacklist error:' + JSON.stringify(err));
                        }
                    }
                );
            }
        }
    })

angular.module('chat.call', [])
    // 通话
    .controller('CallCtrl', function ($scope, $state, $rootScope, $timeout, $ionicHistory,
        $stateParams, signaling, Friends, rongyunService, mediaService) {
        var duplicateMessages = [];
        // 获取联系人
        $scope.contacts = {};
        // 静音
        $scope.muted = false;
        // 是否通话中
        $scope.callInProgress = false;
        // 是否主动发起
        $scope.isCalling = $stateParams.isCalling === 'true';

        // 响铃
        if (!$scope.isCalling) {
            mediaService.playSound();
        }
        // 查找联系人信息
        var contactUser = Friends.get($stateParams.contactName);
        if (!contactUser) {
            return;
        }
        $scope.contactUser = contactUser;
        $scope.contactName = contactUser.id;

        function call(isInitiator, contactName) {
            if (isInitiator) {
                sendMessage('[发起视频通话]');
            }
            // session通话初始化
            var session = phoneRTCService.createSession();
            session.on('sendMessage', function (data) {
                signaling.emit('sendMessage', contactName, {
                    type: 'phonertc_handshake',
                    data: JSON.stringify(data)
                });
            });
            session.on('answer', function () {
                // console.log('Answered!');
            });
            session.on('disconnect', function () {
                if ($scope.contacts[contactName]) {
                    delete $scope.contacts[contactName];
                }
                if (Object.keys($scope.contacts).length === 0) {
                    signaling.emit('sendMessage', contactName, { type: 'ignore' });
                    //junmback();
                    alert('************disconnects*************');
                }
            });
            session.call();
            // 保存连接
            $scope.contacts[contactName] = session;
        }
        // 拨号[发起]
        if ($scope.isCalling) {
            //alert('发起聊天：' + $scope.contactName + 'is Calling:' + $scope.isCalling);
            signaling.emit('sendMessage', $scope.contactName, { type: 'call' });
        }

        // 忽略
        $scope.ignore = function (msg) {
            alert('忽略');
            if (ring) {
                ring.release();
            }
            sendMessage(msg);
            var contactNames = Object.keys($scope.contacts);
            if (contactNames.length > 0) {
                $scope.contacts[contactNames[0]].disconnect();
            } else {
                signaling.emit('sendMessage', $scope.contactName, { type: 'ignore' });
                $scope.callInProgress = false;
                junmback();
            }
        };

        // 结束通话
        $scope.end = function () {
            alert('结束');
            sendMessage('[结束通话]');
            Object.keys($scope.contacts).forEach(function (contact) {
                $scope.contacts[contact].close();
                delete $scope.contacts[contact];
            });
            signaling.emit('sendMessage', $scope.contactName, { type: 'end' });
            $scope.callInProgress = false;
            junmback();
        };

        // 接听
        $scope.answer = function () {
            //alert('接听');
            if (ring) {
                ring.release();
            }
            if ($scope.callInProgress) {
                alert('*****正在通话中哦*****');
                return;
            }
            $scope.callInProgress = true;
            // 1s 后显示视频
            $timeout($scope.updateVideoPosition, 1000);
            call(false, $scope.contactName);
            // 1.5s 后接听
            setTimeout(function () {
                signaling.emit('sendMessage', $scope.contactName, { type: 'answer' });
            }, 1500);
        };

        // 静音
        // $scope.toggleMute = function () {
        //     $scope.muted = !$scope.muted;
        //     Object.keys($scope.contacts).forEach(function (contact) {
        //         var session = $scope.contacts[contact];
        //         session.streams.audio = !$scope.muted;
        //         session.renegotiate();
        //     });
        // };

        $scope.updateVideoPosition = function () {
            $rootScope.$broadcast('videoView.updatePosition');
        };

        // === socket.io消息分类处理(BEGIN) ===
        function onMessageReceive(name, message) {
            switch (message.type) {
                case 'answer':
                    // alert('************别人点了接听呀*************');
                    $scope.$apply(function () {
                        $scope.callInProgress = true;
                        $timeout($scope.updateVideoPosition, 1000);
                    });

                    var existingContacts = Object.keys($scope.contacts);
                    if (existingContacts.length !== 0) {
                        signaling.emit('sendMessage', name, {
                            type: 'add_to_group',
                            contacts: existingContacts,
                            isInitiator: false
                        });
                    }
                    call(true, name);
                    // alert('************call 方法没有问题呀*************');
                    break;
                // 拒绝接听(忽略)
                case 'ignore':
                    var len = Object.keys($scope.contacts).length;
                    if (len > 0) {
                        if ($scope.contacts[name]) {
                            $scope.contacts[name].close();
                            delete $scope.contacts[name];
                        }
                        var i = $scope.hideFromContactList.indexOf(name);
                        if (i > -1) {
                            $scope.hideFromContactList.splice(i, 1);
                        }

                        if (Object.keys($scope.contacts).length === 0) {
                            $scope.callInProgress = false;
                            junmback();
                        }
                    } else {
                        $scope.callInProgress = false;
                        junmback();
                    }
                    break;
                // 结束通话
                case 'end':
                    // alert('对方已经结束通话');
                    Object.keys($scope.contacts).forEach(function (contact) {
                        $scope.contacts[contact].close();
                        delete $scope.contacts[contact];
                    });
                    $timeout(function () {
                        $scope.callInProgress = false;
                        junmback();
                    }, 1000);
                    break;
                case 'phonertc_handshake':
                    // 本意是屏蔽重复信息，这里我@kobepeng先去掉了
                    //if (duplicateMessages.indexOf(message.data) === -1) {
                    // key : receiveMessage
                    $scope.contacts[name].receiveMessage(JSON.parse(message.data));
                    //   duplicateMessages.push(message.data);
                    // }
                    break;
                case 'add_to_group':
                    alert("add_to_group");
                    message.contacts.forEach(function (contact) {
                        $scope.hideFromContactList.push(contact);
                        call(message.isInitiator, contact);
                        if (!message.isInitiator) {
                            $timeout(function () {
                                signaling.emit('sendMessage', contact, {
                                    type: 'add_to_group',
                                    contacts: [ContactsService.currentName],
                                    isInitiator: true
                                });
                            }, 1500);
                        }
                    });
                    break;
                case 'callInProgress':
                    alert('对方正在通话中!');
                    junmback();
                    break;
                default: break;
            }
        }
        signaling.on('messageReceived', onMessageReceive);
        $scope.$on('$destroy', function () {
            signaling.removeListener('messageReceived', onMessageReceive);
        });
        function sendMessage(content) {
            rongyunService.sendMessage("PRIVATE", contactUser.id, content).then(function (data) {
                appendNewMsg(data, true);
            });
        }
        function junmback() {
            $ionicHistory.goBack(-1);
        }
    });

/**
 * 待测
 */

angular.module('chat.controllers')
    .controller('addGroupmember', function ($scope, $stateParams,
        $ionicPopup, $cordovaContacts, $ionicHistory, myNote, $timeout,
        Friends, Groups, AddGroupRequest) {
        var GroupID = $stateParams.GroupID;
        var group = {};

        // 获取好友列表
        Friends.all(function (frns) {
            var grp = Groups.getGroupMembers(GroupID, function (members) {
                for (var i = 0; i < frns.length; i++) {
                    frns[i].MemberID = "";
                    for (var j = 0; j < members.length; j++) {
                        if (frns[i].id == members[j]._id) {
                            frns[i].checked = true;
                            frns[i].MemberID = "123";
                        }
                    }
                }
                $scope.friends = frns;
            });
        });

        // 提交
        $scope.sure = function () {
            var members = [];
            angular.forEach($scope.friends, function (data) {
                if (!!data.checked && data.MemberID == "") {
                    members.push(data.id);
                }
            });
            addGroupMember(members);
        };

        // 发送入群请求
        function addGroupMember(members) {
            for (var j = 0; j < members.length; j++) {
                // userid，frindid，groupid， 
                AddGroupRequest(members[i], GroupID, function (data) {
                    alert("请求好友们入群发送成功！");
                });
            }
        }
    })
angular.module('chat.controllers')
    .controller('groupInfoCtrl', function ($scope, Groups, $state,
        $stateParams, RequestUrl) {
        $scope.Target = Groups.get($stateParams.targetId);
        var targetId = $stateParams.targetId;
        var targetName = $stateParams.targetName;
        var conversationType = $stateParams.conversationType;

        // 发送群消息
        $scope.sendMsg = function () {
            $state.go('tab.chatDetail',
                { name: targetName, targetId: targetId, conversationType: conversationType });
        }
        // 添加群成员
        $scope.addGroupmember = function () {
            $state.go('tab.addGroupmember',
                { GroupID: targetId });
        }
        $scope.members = [];
        function getGroupMem() {
            Groups.getGroupMembers(targetId, callback);
            function callback(members) {
                var length = members.length;
                $scope.Target.number = length;
                for (var i = 0; i < length; i++) {
                    var obj = {};
                    var temdata = members[i];
                    obj.id = temdata._id;
                    obj.name = temdata.nickname;
                    obj.portrait = temdata.headimg ? RequestUrl + 'Images/Photo/' + temdata.headimg : null;
                    $scope.members.push(obj);
                }
            }
        }
        // 获取群组成员
        getGroupMem();
    });
/**
 * chat模块服务
*/
var chat_modules = ['chat.route', 'chat.controllers', 'chat.services', 'chat.directive', 'chat.filter'];
chat_modules.concat(["chat.call"]);
angular.module('chat', chat_modules)
  // 视频服务配置
  .config(function (SignalingProvider, VEDIO_CHAT_URL) {
    SignalingProvider.setBackendUrl(VEDIO_CHAT_URL);
  })
  /**
   * 服务初始化
   * @param  {[Object]} $state [跳转服务]
   * @param  {[Object]} Signaling [socket.io实例]
   * @param  {[Object]} $ionicLoading [加载弹层]
   * @param  {[Object]} $rootScope [全局scope]
   * @param  {[Object]} newMessageEventService [新消息事件服务]
   */
  .run(function ($state, Signaling, $ionicLoading, $rootScope, newMessageEventService) {
    var chMsg = function (newValue, oldValue) {
      if (newValue !== oldValue) {
        var jsonMsg = newValue.pop();
        if (typeof jsonMsg !== "undefined" && jsonMsg !== "undefined") {
          newMessageEventService.broadcast(jsonMsg);
        }
      }
    };
    // watch items的变化
    var listener = $rootScope.$watch('arrMsgs', chMsg, true);
    Signaling.on('messageReceived', function (name, message, Signaling) {
      switch (message.type) {
        case 'call':
          if ($state.current.name === 'call') {
            Signaling.emit('sendMessage', name, { type: 'callInProgress' });
            return;
          }
          $state.go('call', { isCalling: false, contactName: name });
          break;
      }
    });
  });



//# sourceMappingURL=data:application/json;charset=utf8;base64,
